#include <iostream>
#include <string> 
using namespace std;

bool huiwen(string s, int low, int high){
	if(s[low]!=s[high]){
		return false;
	}
	if(low==high||low==high-1){
		return true;
	}
	return huiwen(s, low+1, high-1);
}

int main(){
	string s;
	cin >> s;
	int n = s.size();
	bool res = huiwen(s, 0, n-1);
	if(res==1){
	cout <<s<<"is a palindrome." << endl;
	}
	else{
		cout << s<< "is not a palindrome." << endl;
	}
	return 0;
} 



//加法分解
#include <iostream>
using namespace std;
int sum=0;
void jffj1(int n,int count,int *p)
{
	if(n==0)
	{
		cout<<sum<<"=";
		for (int i=0;i<count;i++)
			if(i==count-1)
			    cout<<p[i]<<endl;
			else
			    cout<<p[i]<<"+"; 
	    return;
	}
	for(int i=1;i<=n;i++)
	{
		p[count]=i;
		jffj1(n-i,count+1,p);
	}
	return;
}
void jffj2(int n,int count,int *p)
{
	if(n==0)
	{
		cout<<sum<<"=";
		for (int i=0;i<count;i++)
			if(i==count-1)
			    cout<<p[i]<<endl;
			else
			    cout<<p[i]<<"+"; 
	    return;
	}
	int k=count>0?p[count-1]:1;
	for(int i=k;i<=n;i++)
	{
		p[count]=i;
		jffj2(n-i,count+1,p);
	}

}
int main()
{
	int n,m;
	cin>>n>>m;
	sum=n;
	int* p=new int[n];
	if(m==1)
	    jffj1(n,0,p);
	else if(m=2)
	    jffj2(n,0,p);
	return 0;
	
}
